// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  password          String?
  firstName         String?
  lastName          String?
  username          String?           @unique
  phoneNumber       String?           @unique
  dateOfBirth       DateTime?
  profileImage      String?
  walletAddress     String?           @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isEmailVerified   Boolean           @default(false)
  isPhoneVerified   Boolean           @default(false)
  socialLogins      SocialLogin[]
  wallet            Wallet?
  savingsGoals      SavingsGoal[]
  budgets           Budget[]
  transactions      Transaction[]
  investments       Investment[]
  aiConversations   AiConversation[]
  notifications     Notification[]
  streaks           Streak[]
  emergencyFund     EmergencyFund?
}

model SocialLogin {
  id           String   @id @default(uuid())
  userId       String
  provider     String   // google, apple, facebook, etc.
  providerId   String
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
}

model Wallet {
  id          String        @id @default(uuid())
  userId      String        @unique
  balance     Decimal       @default(0) @db.Decimal(10, 2)
  currency    String        @default("USD")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model SavingsGoal {
  id          String        @id @default(uuid())
  userId      String
  name        String
  targetAmount Decimal      @db.Decimal(10, 2)
  currentAmount Decimal     @default(0) @db.Decimal(10, 2)
  deadline    DateTime?
  category    String?
  description String?
  isCompleted Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Budget {
  id          String        @id @default(uuid())
  userId      String
  name        String
  amount      Decimal       @db.Decimal(10, 2)
  period      String        // monthly, weekly, etc.
  category    String
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Transaction {
  id            String       @id @default(uuid())
  userId        String
  walletId      String
  amount        Decimal      @db.Decimal(10, 2)
  type          String       // deposit, withdrawal, transfer, payment
  category      String?
  description   String?
  date          DateTime     @default(now())
  status        String       @default("completed") // pending, completed, failed
  savingsGoalId String?
  budgetId      String?
  investmentId  String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet        Wallet       @relation(fields: [walletId], references: [id], onDelete: Cascade)
  savingsGoal   SavingsGoal? @relation(fields: [savingsGoalId], references: [id])
  budget        Budget?      @relation(fields: [budgetId], references: [id])
  investment    Investment?  @relation(fields: [investmentId], references: [id])
}

model Investment {
  id           String        @id @default(uuid())
  userId       String
  name         String
  amount       Decimal       @db.Decimal(10, 2)
  type         String        // stocks, crypto, bonds, etc.
  symbol       String?
  purchaseDate DateTime      @default(now())
  currentValue Decimal?      @db.Decimal(10, 2)
  status       String        @default("active") // active, sold
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model AiConversation {
  id        String   @id @default(uuid())
  userId    String
  message   String
  response  String
  category  String?  // financial_advice, budgeting, investing, etc.
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String   // alert, reminder, achievement, etc.
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Streak {
  id        String   @id @default(uuid())
  userId    String
  type      String   // savings, budgeting, etc.
  count     Int      @default(0)
  lastDate  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmergencyFund {
  id            String   @id @default(uuid())
  userId        String   @unique
  targetAmount  Decimal  @db.Decimal(10, 2)
  currentAmount Decimal  @default(0) @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}